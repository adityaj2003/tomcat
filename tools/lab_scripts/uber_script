#!/bin/bash

set -u

# Collect username
__get_username() {
  read -e -p "Enter a username with privilege enough to connect to the client machines: " -r USERNAME
  export $USERNAME
}

__check_root_directories() {
  # Check root directory for TOM
  if [[ -z ${EXPERIMENT_ROOT_DIR_TOM+x} ]]; then
    read -e -p "Could not find the experiment root directory for TOM. Please enter that information: " -r EXPERIMENT_ROOT_DIR_TOM
  else
    local keep=""
    while [[ "$keep" != "y" ]] && [[ "$keep" != "n" ]]; do
      read -e -p "TOM experiment root directory: $EXPERIMENT_ROOT_DIR_TOM. Keep directory? [y/n]: " -r keep
    done

    if [[ "$keep" == "n" ]]; then
      read -e -p "Enter a new experiment root directory for TOM: " -r EXPERIMENT_ROOT_DIR_TOM
      export $EXPERIMENT_ROOT_DIR_TOM
    fi
  fi

  # Check root directory for CAT
  if [[ -z ${EXPERIMENT_ROOT_DIR_CAT+x} ]]; then
    read -e -p "Could not find the experiment root directory for CAT. Please enter that information: " -r EXPERIMENT_ROOT_DIR_CAT
  else
    local keep=""
    while [[ "$keep" != "y" ]] && [[ "$keep" != "n" ]]; do
      read -e -p "CAT experiment root directory: $EXPERIMENT_ROOT_DIR_CAT. Keep directory? [y/n]: " -r keep
    done

    if [[ "$keep" == "n" ]]; then
      read -e -p "Enter a new experiment root directory for CAT: " -r EXPERIMENT_ROOT_DIR_CAT
      export $EXPERIMENT_ROOT_DIR_CAT
    fi
  fi
}

__check_client_addresses() {
  if [[ -z ${LION_ADDRESS+x} ]]; then
    read -e -p "Could not find the lion's address. Please enter that information: " -r LION_ADDRESS

    ssh -q $USERNAME@$LION_ADDRESS exit
    local connection_established=$?
    while [[ $connection_established -ne 0 ]]; do
      read -e -p "Could not connect to lion. Please reenter lion's address: " -r LION_ADDRESS
      ssh -q $USERNAME@$LION_ADDRESS exit
      connection_established=$?
    done

    export $LION_ADDRESS
  fi

  if [[ -z ${TIGER_ADDRESS+x} ]]; then
    read -e -p "Could not find the tiger's address. Please enter that information: " -r TIGER_ADDRESS
    export $TIGER_ADDRESS

    ssh -q $USERNAME@$TIGER_ADDRESS exit
    local connection_established=$?
    while [[ $connection_established -ne 0 ]]; do
      read -e -p "Could not connect to tiger. Please reenter tiger's address: " -r TIGER_ADDRESS
      ssh -q $USERNAME@$TIGER_ADDRESS exit
      connection_established=$?
    done

    export $TIGER_ADDRESS
  fi

  if [[ -z ${LEOPARD_ADDRESS+x} ]]; then
    read -e -p  "Could not find the leopard's address. Please enter that information: " -t LEOPARD_ADDRESS
    export $LEOPARD_ADDRESS

    ssh -q $USERNAME@$LEOPARD_ADDRESS exit
    local connection_established=$?
    while [[ $connection_established -ne 0 ]]; do
      read -e -p "Could not connect to leopard. Please reenter leopard's address: " -r LEOPARD_ADDRESS
      ssh -q $USERNAME@$LEOPARD_ADDRESS exit
      connection_established=$?
    done

    export $LEOPARD_ADDRESS
  fi
}

#TOMCAT="$(cd "$( dirname "${BASH_SOURCE[0]}" )/../../" >/dev/null 2>&1 && pwd)"

__display_initial_inquiry() {
  local order=$1
  local new_experiment=""
  while [[ "$new_experiment" != "y" ]] && [[ "$new_experiment" != "n" ]]; do
    read -e -p "[$order] Do you wish to start a new experiment? [y/n]: " -r new_experiment
  done

  if [[ "$new_experiment" == "y" ]]; then
    __start_new_experiment $order
  else
    read -e -p " - Enter an existent experiment ID: " -r EXPERIMENT_ID
    EXPERIMENT_DIR_TOM="$ROOT_DIR_TOM"/Exp_"$EXPERIMENT_ID"
    EXPERIMENT_DIR_CAT="$ROOT_DIR_CAT"/Exp_"$EXPERIMENT_ID"
    while [[ ! -d "$EXPERIMENT_DIR_TOM" ]] || [[ ! -d "$EXPERIMENT_DIR_CAT" ]]; do
      [[ ! -d "$EXPERIMENT_DIR_TOM" ]] && printf "\e[31m  - Experiment directory $EXPERIMENT_DIR_TOM does not exist.\e[0m\n"
      [[ ! -d "$EXPERIMENT_DIR_CAT" ]] && printf "\e[31m  - Experiment directory $EXPERIMENT_DIR_CAT does not exist.\e[0m\n"
      read -e -p " - Enter a valid experiment ID: " -r EXPERIMENT_ID
      EXPERIMENT_DIR_TOM="$ROOT_DIR_TOM"/Exp_"$EXPERIMENT_ID"
      EXPERIMENT_DIR_CAT="$ROOT_DIR_CAT"/Exp_"$EXPERIMENT_ID"
    done
    export EXPERIMENT_ID
    export EXPERIMENT_DIR_TOM
    export EXPERIMENT_DIR_CAT
  fi
}

__start_new_experiment() {
  local order=$1
  export EXPERIMENT_ID=$(date +%Y_%m_%d_%H)
  export EXPERIMENT_DIR_TOM="$EXPERIMENT_ROOT_DIR_TOM"/Exp_"$EXPERIMENT_ID"
  export EXPERIMENT_DIR_CAT="$EXPERIMENT_ROOT_DIR_CAT"/Exp_"$EXPERIMENT_ID"

  source "$TOMCAT/tools/lab_scripts/create_directory_structure"
  echo "[$order.1] Creating experiment directory structure for TOM"
  create_directory_structure "$EXPERIMENT_DIR_TOM"
  echo "[$order.2] Creating experiment directory structure for CAT"
  create_directory_structure "$EXPERIMENT_DIR_CAT"
}

__display_nfs_inquiry() {
  local order=$1
  local check_nfs=""
  while [[ "$check_nfs" != "y" ]] && [[ "$check_nfs" != "n" ]]; do
    read -e -p "[$order] Do you wish to check NFS status? [y/n]: " -r check_nfs
  done

  if [[ "$check_nfs" == "y" ]]; then
    __check_nfs_status $order
  fi
}

__check_nfs_status() {
  local order=$1
  source "$TOMCAT/tools/lab_scripts/check_nfs"
  echo "[$order.1] Checking NFS on TOM directory structure"
  check_nfs $EXPERIMENT_DIR_TOM
  echo "[$order.2] Checking NFS on CAT directory structure"
  check_nfs $EXPERIMENT_DIR_CAT
}

__display_mumble_inquiry() {
  start_mumble=""
  while [[ "$start_mumble" != "y" ]] && [[ "$start_mumble" != "n" ]]; do
    read -e -p "[$1] Do you wish to start mumble? [y/n]: " -r start_mumble
  done

  if [[ "$start_mumble" == "y" ]]; then
    __start_mumble
  fi
}

__start_mumble() {
  echo "Starting Mumble"
}

__display_pupil_capture_inquiry() {
  start_pupil_capture=""
  while [[ "$start_pupil_capture" != "y" ]] && [[ "$start_pupil_capture" != "n" ]]; do
    read -e -p "[$1] Do you wish to start pupil capture? [y/n]: " -r start_pupil_capture
  done

  if [[ "$start_pupil_capture" == "y" ]]; then
    __start_pupil_capture
  fi
}

__start_pupil_capture() {
  echo "Starting pupil capture"
}

__display_ffmpeg_inquiry() {
  start_ffmpeg=""
  while [[ "$start_ffmpeg" != "y" ]] && [[ "$start_ffmpeg" != "n" ]]; do
    read -e -p "[$1] Do you wish to start ffmpeg? [y/n]: " -r start_ffmpeg
  done

  if [[ "$start_ffmpeg" == "y" ]]; then
    __start_ffmpeg
  fi
}

__start_ffmpeg() {
  echo "Starting ffmpeg"
}

__display_fnirs_inquiry() {
  start_fnirs=""
  while [[ "$start_fnirs" != "y" ]] && [[ "$start_fnirs" != "n" ]]; do
    read -e -p "[$1] Do you wish to start fNIRS? [y/n]: " -r start_fnirs
  done

  if [[ "$start_fnirs" == "y" ]]; then
    __start_fnirs
  fi
}

__start_fnirs() {
  echo "Starting fNIRS"
}

__display_testbed_inquiry() {
  start_testbed=""
  while [[ "$start_testbed" != "y" ]] && [[ "$start_testbed" != "n" ]]; do
    read -e -p  "[$1] Do you wish to bring the testbed up? [y/n]: " -r start_testbed
  done

  if [[ "$start_testbed" == "y" ]]; then
    __start_testbed
  fi
}

__start_testbed() {
  echo "Starting the testbed"
}

__display_baseline_task_inquiry() {
  start_baseline_task=""
  while [[ "$start_baseline_task" != "y" ]] && [[ "$start_baseline_task" != "n" ]]; do
    read -e -p "[$1] Do you wish to start the baseline task? [y/n]: " -r start_baseline_task
  done

  if [[ "$start_baseline_task" == "y" ]]; then
    __start_baseline_task
  fi
}

__start_baseline_task() {
  echo "Starting the baseline task"
}

__display_minecraft_inquiry() {
  start_minecraft=""
  while [[ "$start_minecraft" != "y" ]] && [[ "$start_minecraft" != "n" ]]; do
    read -e -p "[$1] Do you wish to launch Minecraft? [y/n]: " -r start_minecraft
  done

  if [[ "$start_minecraft" == "y" ]]; then
    __start_minecraft
  fi
}

__start_minecraft() {
  echo "Starting Minecraft"
}

__display_survey_inquiry() {
  open_survey=""
  while [[ "$open_survey" != "y" ]] && [[ "$open_survey" != "n" ]]; do
    read -e -p "[$1] Do you wish to open the end-of-experiment survey? [y/n]: " -r open_survey
  done

  if [[ "$open_survey" == "y" ]]; then
    __open_survey
  fi
}

__open_survey() {
  echo "Opening end-of-experiment survey"
}

__display_finish_experiment_inquiry() {
  finish=""
  while [[ "$finish" != "quit" ]]; do
    read -e -p "[$1] Type [quit] to finish the experiment. This will stop all the processes and close all the applications in the client machines: " -r finish
  done

  __finish_experiment
}

__finish_experiment() {
  echo "Finishing experiment"
}

__get_username
__check_root_directories
__check_client_addresses

__display_initial_inquiry 1
__display_nfs_inquiry 2
__display_mumble_inquiry 3
__display_pupil_capture_inquiry 4
__display_ffmpeg_inquiry 5
__display_fnirs_inquiry 6
__display_testbed_inquiry 7
__display_baseline_task_inquiry 8
__display_minecraft_inquiry 8
__display_survey_inquiry 9
__display_finish_experiment_inquiry 10

exit 0
