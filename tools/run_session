#!/bin/bash
set -u

# =============================================================================

# Set the TOMCAT environment variable, assuming that the directory structure
# mirrors that of the git repository.
TOMCAT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../" >/dev/null 2>&1 && pwd)"
export TOMCAT
source "$TOMCAT"/tools/recording_helper

"$TOMCAT"/tools/start_mosquitto

# If the above fails, we do not get here.

# Function to cleanup things on exit or keyboard interrupt.
session_cleanup() {
    kill_av_recording_and_mosquitto_sub
    cleanup_status=0
    if [[ ${RECYCLE_MINECRAFT} -lt 2 ]]; then
        if ! "${TOMCAT}/tools/kill_minecraft"; then
            echo "Failed to kill Minecraft."
            exit 1
        fi
    fi

    if [[ $ENABLE_SYSTEM_AUDIO_RECORDING -eq 1 && $CI -eq 0 && "$OSTYPE"  == "darwin"* ]]; then
        # Switching the audio output from the multi-output device to the
        # built-in output.
        if ! SwitchAudioSource -s "$ORIGINAL_OUTPUT_DEVICE"; then
            echo " "
            echo "Failed to switch audio output device back to what it was"\
                "before run_session (${ORIGINAL_OUTPUT_DEVICE})."
            echo " "
            exit 1
        fi
    fi
}


mission_cleanup() {

    kill_av_recording_and_mosquitto_sub
    echo "Checking output files..."

    files_to_check=("messages.txt")

    if (( ENABLE_FFMPEG )); then
        files_to_check+=("player_audio.wav" "screen_video.mpg" "webcam_video.mpg")
    fi

    if (( ENABLE_SYSTEM_AUDIO_RECORDING )); then
        files_to_check+=("system_audio.wav")
    fi

    echo "Checking files produced in ${MISSION_OUTPUT_DIR}..."

    for file in ${files_to_check[@]}; do
        if [[ -f "${MISSION_OUTPUT_DIR}/${file}" ]]; then
            file_size=$(ls -l "${MISSION_OUTPUT_DIR}/${file}" | awk '{print $5}')
            if [[ ${file_size} -eq 0 ]]; then
                echo "WARNING: ${file} from Mission ${CURRENT_MISSION}: size is 0 bytes"
            fi
        else
            echo "WARNING: ${file} from Mission ${CURRENT_MISSION}: does not exist"
        fi
    done

    echo -e '\n'
}

# A function to handle cleanup when a user interrupts the script with Ctrl+C
user_interrupt() {
    echo "Detected keyboard interrupt."
    echo "Cleaning up now"
    mission_cleanup
    session_cleanup
}

trap user_interrupt SIGINT SIGTERM


do_mission() {
    export CURRENT_MISSION="$1"
    echo " "
    echo "Running mission ${CURRENT_MISSION} in ${TOMCAT}."
    echo " "
    mission_log="$TOMCAT_TMP_DIR"/mission_"$CURRENT_MISSION".log
    export MISSION_OUTPUT_DIR="${SESSION_OUTPUT_DIR}"/mission_"$CURRENT_MISSION"
    mkdir -p "$MISSION_OUTPUT_DIR"
    messages="$MISSION_OUTPUT_DIR"/messages.txt


    if ! "${TOMCAT}"/tools/check_minecraft; then
        echo "Main mission cannot find or create a viable Minecraft process."
        cleanup
        exit 1
    fi

    runMission_args="--mission ${CURRENT_MISSION}\
                     --record_observations\
                     --uuid ${SESSION_UUID}"

    if [[ $CURRENT_MISSION -gt 0 ]]; then
        runMission_args="${runMission_args}\
                            --time_limit ${TIME_LIMIT}\
                            --difficulty ${DIFFICULTY}"
    fi

    if (( ENABLE_FFMPEG )); then
        start_av_recording $MISSION_OUTPUT_DIR
    fi

    # Publish the Malmo observation messages to the message bus on the
    # topic observations/state.
    "${TOMCAT}"/build/bin/runMission\
    $runMission_args\
    2> "${mission_log}" &
    pid_runMission=$!

    # Subscribe to topics on the message bus and redirect the output to a file.
    mosquitto_sub -t "observations/#" -F '{"topic": "%t", "message": %p}' > "$messages" &

    if [[ $CURRENT_MISSION -gt 0 ]]; then
        echo "Time limit set to ${TIME_LIMIT}."
    fi
    echo "Process ID corresponding to ./bin/runMission is"\
            "$pid_runMission ... waiting for it to complete."

    # Set up a background job to kill the mission if Minecraft dies.
    ${TOMCAT}/tools/kill_me_if_no_minecraft $pid_runMission < /dev/null &

    wait $pid_runMission
    mission_status=$?

    if [[ ${mission_status} -eq 0 ]]; then
        mission_status=$(grep -c "Error starting mission" "${mission_log}")
    fi

    if [[ ${mission_status} -eq 0 ]]; then
        mission_cleanup
        echo "Mission ${CURRENT_MISSION} ended with exit code 0."
        echo "All recorded data is in ${MISSION_OUTPUT_DIR}"
        echo " "
    fi
}

echo TOMCAT_DEBUG_ECHO: $TOMCAT_DEBUG_ECHO
if (( DO_TUTORIAL_MISSION )); then
    do_mission 0
else
    ${TOMCAT_DEBUG_ECHO} "Skipping tutorial because DO_TUTORIAL_MISSION=0"
fi

if [[ $DO_TUTORIAL_MISSION -eq 1 && $DO_MAIN_MISSION -eq 1 ]]; then
    # We sleep for a few seconds to let the player catch a breath between the
    # tutorial and main missions.
    sleep 6
fi

# If the main mission is 3 (i.e. procedural generation) then we run the
# generator before starting the mission.
if [[ $MAIN_MISSION -eq 3 ]]; then
    "$TOMCAT"/build/bin/generator\
        --world_type 0\
        --semantic_map_path "$TOMCAT"/external/malmo/Minecraft/run/semantic_map.json\
        --low_level_map_path "$TOMCAT"/external/malmo/Minecraft/run/low_level_map.json
fi


if (( DO_MAIN_MISSION )); then do_mission ${MAIN_MISSION}; fi


echo "Finished running all sessions in ${TOMCAT}."
echo "Doing our final cleanup."

# If we are here, then we do not have any errors.

session_cleanup

NETRC="$TOMCAT"/conf/netrc
# Main mission has been completed.
# Call data_upload() if DO_MAIN_MISSION and ENABLE_DATA_UPLOAD are set to 1.
if [[ $DO_MAIN_MISSION -eq 1 && $ENABLE_FILE_UPLOAD -eq 1 ]]; then
    if [[ -f "${NETRC}" ]]; then
        echo "Detected netrc file in the ${TOMCAT} directory."
        echo "We assume that you are a member of the UA team, have run a"
        echo "session and want your session data uploaded to the vision server."
        echo "We will now attempt to do that."
        if ! "$TOMCAT"/tools/upload_session "$SESSION_UUID"; then
            echo "Data upload failed."
            echo "You can try uploading the session later by running:"
            echo "    ./tools/upload_session ${SESSION_UUID}"
        fi
    else
        echo "No netrc file was detected in the ${TOMCAT} directory, so we "\
             "will not attempt to automatically upload the data. "\
             "If you are a UArizona team member, please email "\
             "[tomcat-support at list dot arizona dot edu] to obtain one."
    fi
fi

echo "Session successfully completed. Thank you!"

exit 0
